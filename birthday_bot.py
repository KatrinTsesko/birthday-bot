import os
import json
import csv
import logging
import requests
from datetime import datetime, time
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ê -------------------- #
load_dotenv()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

HOLIDAYS = {"01.01", "23.02", "08.03", "01.05", "09.05", "12.06", "04.11"}

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
TZ = os.getenv("TZ", "Europe/Moscow")

# –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è polling
PORT = int(os.environ.get("PORT", 8443))  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

BIRTHDAYS_FILE = "birthdays.json"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# -------------------- –§–£–ù–ö–¶–ò–ò -------------------- #
def load_birthdays():
    try:
        with open(BIRTHDAYS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_birthdays(birthdays):
    with open(BIRTHDAYS_FILE, "w", encoding="utf-8") as f:
        json.dump(birthdays, f, ensure_ascii=False, indent=2)
    sync_to_csv(birthdays)

def sync_to_csv(birthdays):
    try:
        with open("import_birthdays.csv", "w", newline="", encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=["–ò–º—è", "–î–∞—Ç–∞"])
            writer.writeheader()
            for name, date in birthdays.items():
                writer.writerow({"–ò–º—è": name, "–î–∞—Ç–∞": date})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ CSV: {e}")

# -------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò -------------------- #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='add')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data='list')],
        [InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç CSV", callback_data='import')],
        [InlineKeyboardButton("üÜî –ü–æ–ª—É—á–∏—Ç—å ID", callback_data='getid')],
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞", callback_data='check')],
        [InlineKeyboardButton("üíæ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data='sync')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("üêõ Debug", callback_data='debug')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üéÇ Company Birthday Bot\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    cmd_map = {
        'add': lambda u, c: query.edit_message_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ò–º—è –¥–µ–Ω—å.–º–µ—Å—è—Ü\n–ü—Ä–∏–º–µ—Ä: /add –ò–≤–∞–Ω 15.05"),
        'list': list_birthdays,
        'import': import_birthdays,
        'getid': get_chat_id,
        'check': force_check,
        'sync': sync_files,
        'help': show_help,
        'debug': show_debug
    }
    
    handler = cmd_map.get(query.data)
    if handler:
        await handler(update, context)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/add –ò–º—è –¥–µ–Ω—å.–º–µ—Å—è—Ü - –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è  
/import - –ò–º–ø–æ—Ä—Ç –∏–∑ CSV
/getid - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
/check - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
/sync - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
/debug - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    """
    if hasattr(update, 'callback_query'):
        await update.callback_query.edit_message_text(help_text)
    else:
        await update.message.reply_text(help_text)

async def show_debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    birthdays = context.bot_data.get("birthdays", {})
    debug_info = f"""
üêõ **Debug Information:**
‚Ä¢ –ë–æ—Ç: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if BOT_TOKEN else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
‚Ä¢ –ß–∞—Ç ID: {CHAT_ID or '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ}
‚Ä¢ –î–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π: {len(birthdays)}
‚Ä¢ –¢–æ–∫–µ–Ω DeepSeek: {'‚úÖ' if DEEPSEEK_API_KEY else '‚ùå'}
‚Ä¢ –†–µ–∂–∏–º: Polling üöÇ
    """
    if hasattr(update, 'callback_query'):
        await update.callback_query.edit_message_text(debug_info)
    else:
        await update.message.reply_text(debug_info)

async def add_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    birthdays = context.bot_data.get("birthdays", {})
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ò–º—è –¥–µ–Ω—å.–º–µ—Å—è—Ü\n–ü—Ä–∏–º–µ—Ä: /add –ò–≤–∞–Ω 15.05")
        return
    
    try:
        name = ' '.join(context.args[:-1]).strip()
        date_str = context.args[-1].strip()
        day, month = map(int, date_str.split('.'))
        
        if not (1 <= day <= 31 and 1 <= month <= 12):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –¥–µ–Ω—å.–º–µ—Å—è—Ü")
            return
        
        birthdays[name] = f"{day:02d}.{month:02d}"
        save_birthdays(birthdays)
        context.bot_data["birthdays"] = birthdays
        await update.message.reply_text(f"‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω(–∞): {day:02d}.{month:02d}")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ò–º—è –¥–µ–Ω—å.–º–µ—Å—è—Ü")

async def list_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    birthdays = context.bot_data.get("birthdays", {})
    if not birthdays:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –ø—É—Å—Ç")
        return
    
    response = "üìÖ **–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:**\n"
    for name, date in sorted(birthdays.items(), key=lambda x: x[1]):
        response += f"‚Ä¢ {name}: {date}\n"
    
    await update.message.reply_text(response)

async def import_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    birthdays = context.bot_data.get("birthdays", {})
    try:
        imported_count = 0
        with open('import_birthdays.csv', 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                name, date_str = row['–ò–º—è'].strip(), row['–î–∞—Ç–∞'].strip()
                if name and _validate_date(date_str):
                    birthdays[name] = date_str
                    imported_count += 1
        
        save_birthdays(birthdays)
        context.bot_data["birthdays"] = birthdays
        await update.message.reply_text(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {imported_count}")
        
    except FileNotFoundError:
        await update.message.reply_text("‚ùå –§–∞–π–ª import_birthdays.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

def _validate_date(date_str):
    try:
        day, month = map(int, date_str.split('.'))
        return 1 <= day <= 31 and 1 <= month <= 12
    except ValueError:
        return False

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`\n\n–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é CHAT_ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", parse_mode='Markdown')

async def force_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_birthday_greetings(context)
    await update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

async def sync_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    birthdays = context.bot_data.get("birthdays", {})
    save_birthdays(birthdays)
    await update.message.reply_text("üíæ –§–∞–π–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

async def generate_greeting(full_name):
    first_name = full_name.split()[0]
    
    if not DEEPSEEK_API_KEY:
        return f"üéâ {first_name}, –æ—Ç –≤—Å–µ–π –¥—É—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ"
    
    try:
        url = "https://api.deepseek.com/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "model": "deepseek-chat",
            "messages": [
                {"role": "system", "content": "–¢—ã –ø–∏—à–µ—à—å —Ç–µ–ø–ª—ã–µ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–ª–µ–≥. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º."},
                {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ —Ç–µ–ø–ª–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–ª–µ–≥–∏ –ø–æ –∏–º–µ–Ω–∏ {first_name}. –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."}
            ],
            "max_tokens": 150,
            "temperature": 0.8
        }
        
        response = requests.post(url, headers=headers, json=data, timeout=15)
        response.raise_for_status()
        
        greeting = response.json()['choices'][0]['message']['content'].strip()
        if first_name.lower() not in greeting.lower():
            greeting = f"{first_name}, {greeting}"
            
        return greeting
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        return f"üéâ {first_name}, –æ—Ç –≤—Å–µ–π –¥—É—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ —É—Å–ø–µ—Ö–æ–≤! üéÇ"

async def send_birthday_greetings(context: ContextTypes.DEFAULT_TYPE):
    birthdays = context.bot_data.get("birthdays", {})
    today = datetime.now(tz=ZoneInfo(TZ)).strftime("%d.%m")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
    if today in HOLIDAYS:
        logging.info(f"–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π ({today}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
        return
    
    messages = []
    for name, date in birthdays.items():
        if date == today:
            greeting = await generate_greeting(name)
            messages.append(greeting)
    
    if messages and CHAT_ID:
        try:
            await context.bot.send_message(
                chat_id=CHAT_ID, 
                text="\n\n".join(messages),
                parse_mode='Markdown'
            )
            logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {len(messages)}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    elif messages and not CHAT_ID:
        logging.warning("–ï—Å—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–æ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# -------------------- APPLICATION -------------------- #
def build_application():
    app = Application.builder().token(BOT_TOKEN).build()
    app.bot_data["birthdays"] = load_birthdays()
    
    # Handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_birthday))
    app.add_handler(CommandHandler("list", list_birthdays))
    app.add_handler(CommandHandler("import", import_birthdays))
    app.add_handler(CommandHandler("getid", get_chat_id))
    app.add_handler(CommandHandler("check", force_check))
    app.add_handler(CommandHandler("sync", sync_files))
    app.add_handler(CommandHandler("debug", show_debug))
    app.add_handler(CommandHandler("help", show_help))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    # APScheduler - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
    if CHAT_ID:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω CHAT_ID
        app.job_queue.run_daily(
            send_birthday_greetings,
            time=time(hour=9, minute=0, tzinfo=ZoneInfo(TZ)),
            name="daily_birthday_check"
        )
        logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    else:
        logging.warning("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω CHAT_ID")
    
    return app

# -------------------- –ó–ê–ü–£–°–ö -------------------- #
if __name__ == "__main__":
    print("üéÇ Birthday Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"‚Ä¢ –†–µ–∂–∏–º: Polling")
    print(f"‚Ä¢ –¢–æ–∫–µ–Ω: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
    print(f"‚Ä¢ –ß–∞—Ç ID: {'‚úÖ' if CHAT_ID else '‚ùå'}")
    print(f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ}")
    
    try:
        app = build_application()
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
        app.run_polling()
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")