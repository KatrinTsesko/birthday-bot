import os
import json
import logging
import csv
import requests
import calendar
from datetime import datetime, time, timedelta
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
from zoneinfo import ZoneInfo
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ê -------------------- #
load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ —Ñ–∞–π–ª –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
HOLIDAYS = {"01.01", "23.02", "08.03", "01.05", "09.05", "12.06", "04.11"}


class BirthdayBot:
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        self.chat_id = os.getenv('CHAT_ID')
        self.deepseek_api_key = os.getenv('DEEPSEEK_API_KEY')
        self.timezone = os.getenv('TZ', 'Europe/Moscow')
        self.birthdays_file = 'birthdays.json'
        self.load_birthdays()

    # -------------------- –§–ê–ô–õ–´ -------------------- #
    def load_birthdays(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.birthdays_file, 'r', encoding='utf-8') as f:
                self.birthdays = json.load(f)
        except FileNotFoundError:
            self.birthdays = {}
            self.save_birthdays()

    def save_birthdays(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≤ JSON –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å CSV"""
        with open(self.birthdays_file, 'w', encoding='utf-8') as f:
            json.dump(self.birthdays, f, ensure_ascii=False, indent=2)
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º CSV –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        self.sync_to_csv()

    def sync_to_csv(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
        try:
            with open('import_birthdays.csv', 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=['–ò–º—è', '–î–∞—Ç–∞'])
                writer.writeheader()
                for name, date in self.birthdays.items():
                    writer.writerow({'–ò–º—è': name, '–î–∞—Ç–∞': date})
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ CSV: {e}")

    # -------------------- –ö–ù–û–ü–ö–ò -------------------- #
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="add")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="list")],
            [InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –∏–∑ CSV", callback_data="import")],
            [InlineKeyboardButton("üÜî –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞", callback_data="getid")],
            [InlineKeyboardButton("üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data="check")],
            [InlineKeyboardButton("üíæ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤", callback_data="sync")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üéÇ Company Birthday Bot\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        if query.data == "add":
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /add –ò–º—è –¥–µ–Ω—å.–º–µ—Å—è—Ü")
        elif query.data == "list":
            await self.list_birthdays(update, context)
        elif query.data == "import":
            await self.import_birthdays(update, context)
        elif query.data == "getid":
            await self.get_chat_id(update, context)
        elif query.data == "check":
            await self.force_check(update, context)
        elif query.data == "sync":
            await self.sync_files(update, context)
        elif query.data == "help":
            await self.start(update, context)

    async def add_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not context.args or len(context.args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ò–º—è –¥–µ–Ω—å.–º–µ—Å—è—Ü\n–ü—Ä–∏–º–µ—Ä: /add –ò–≤–∞–Ω 15.05")
            return

        try:
            name = ' '.join(context.args[:-1]).strip()
            date_str = context.args[-1].strip()

            if not name:
                await update.message.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
            day, month = map(int, date_str.split('.'))
            if not (1 <= day <= 31 and 1 <= month <= 12):
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –§–æ—Ä–º–∞—Ç: –¥–µ–Ω—å.–º–µ—Å—è—Ü (01-31.01-12)")
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            self.birthdays[name] = f"{day:02d}.{month:02d}"
            self.save_birthdays()

            await update.message.reply_text(f"‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω(–∞): {day:02d}.{month:02d}")

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ò–º—è –¥–µ–Ω—å.–º–µ—Å—è—Ü")

    async def import_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–º–ø–æ—Ä—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        try:
            imported_count = 0

            with open('import_birthdays.csv', 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reader:
                    if all(key in row for key in ['–ò–º—è', '–î–∞—Ç–∞']):
                        name = row['–ò–º—è'].strip()
                        date_str = row['–î–∞—Ç–∞'].strip()

                        if name and date_str and self._validate_date(date_str):
                            self.birthdays[name] = date_str
                            imported_count += 1

            if imported_count > 0:
                self.save_birthdays()
                await update.message.reply_text(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {imported_count}")
            else:
                await update.message.reply_text("‚ùå –§–∞–π–ª import_birthdays.csv –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç")

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")

    def _validate_date(self, date_str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã"""
        try:
            day, month = map(int, date_str.split('.'))
            return 1 <= day <= 31 and 1 <= month <= 12
        except ValueError:
            return False

    async def list_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not self.birthdays:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç")
            return

        response = "üìÖ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n"
        for name, date in sorted(self.birthdays.items(), key=lambda x: x[1]):
            response += f"‚Ä¢ {name}: {date}\n"

        await update.message.reply_text(response)

    async def sync_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤"""
        try:
            self.sync_to_csv()
            count = len(self.birthdays)
            await update.message.reply_text(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –ó–∞–ø–∏—Å–µ–π: {count}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    # -------------------- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–ô -------------------- #
    async def generate_greeting(self, full_name):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ DeepSeek API (fallback ‚Äî —à–∞–±–ª–æ–Ω)"""
        first_name = full_name.split()[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è

        try:
            if not self.deepseek_api_key:
                # Fallback –Ω–∞ —à–∞–±–ª–æ–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞
                return f"üéâ {first_name}, –æ—Ç –≤—Å–µ–π –¥—É—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ"

            url = "https://api.deepseek.com/v1/chat/completions"
            headers = {
                "Authorization": f"Bearer {self.deepseek_api_key}",
                "Content-Type": "application/json"
            }

            data = {
                "model": "deepseek-chat",
                "messages": [
                    {
                        "role": "system",
                        "content": (
                            "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç —Ç–µ–ø–ª—ã–µ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ–ª–ª–µ–≥–∞–º. "
                            "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –¥—Ä—É–∂–µ—Å–∫–∏–º–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏. –ü–∏—à–∏ –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. "
                            "–ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑. –ü–∏—à–∏ –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞ –≤ –Ω–∞—á–∞–ª–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."
                        )
                    },
                    {
                        "role": "user",
                        "content": f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–ª–µ–≥–∏ –ø–æ –∏–º–µ–Ω–∏ {first_name}. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏."
                    }
                ],
                "max_tokens": 100,
                "temperature": 0.9
            }

            response = requests.post(url, headers=headers, json=data, timeout=10)
            response.raise_for_status()
            result = response.json()

            greeting = result['choices'][0]['message']['content'].strip()

            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ –∏–º—è –µ—Å—Ç—å –≤ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–∏
            if first_name.lower() not in greeting.lower():
                greeting = f"{first_name}, {greeting}"

            return greeting

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ DeepSeek: {e}")
            # Fallback –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            return f"üéâ {first_name}, –æ—Ç –≤—Å–µ–π –¥—É—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ"

    async def generate_multi_birthday_greeting(self, birthdays):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ DeepSeek (–∏–ª–∏ fallback)"""
        try:
            if not self.deepseek_api_key:
                return self.generate_fallback_multi_greeting(birthdays)

            url = "https://api.deepseek.com/v1/chat/completions"
            headers = {
                "Authorization": f"Bearer {self.deepseek_api_key}",
                "Content-Type": "application/json"
            }

            names_list = ", ".join(birthdays)
            data = {
                "model": "deepseek-chat",
                "messages": [
                    {
                        "role": "system",
                        "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ü–∏—à–∏ —Ç–µ–ø–ª—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–ª–ª–µ–≥. –°–¥–µ–ª–∞–π –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –µ–¥–∏–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –∞ –Ω–µ —Å–ø–∏—Å–∫–æ–º."
                    },
                    {
                        "role": "user",
                        "content": f"–ù–∞–ø–∏—à–∏ –æ–±—â–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–ª–µ–≥: {names_list}. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –µ–¥–∏–Ω—ã–º –∏ —Ç–µ–ø–ª—ã–º, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏."
                    }
                ],
                "max_tokens": 200,
                "temperature": 0.8
            }

            response = requests.post(url, headers=headers, json=data, timeout=10)
            response.raise_for_status()
            result = response.json()

            greeting = result['choices'][0]['message']['content'].strip()
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∂–µ —Å emoji, —Ç.–∫. —ç—Ç–æ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç
            return f"üéâ {greeting}"

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ DeepSeek –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤: {e}")
            return self.generate_fallback_multi_greeting(birthdays)

    def generate_fallback_multi_greeting(self, birthdays):
        """–ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤"""
        names_list = ", ".join(birthdays)
        return (
            f"üéâ –°–µ–≥–æ–¥–Ω—è {len(birthdays)} –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞! üéä\n\n"
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –Ω–∞—à–∏—Ö –∫–æ–ª–ª–µ–≥ {names_list} —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! "
            f"–û—Ç –≤—Å–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∂–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ø–µ—Ö–æ–≤ –∏ —è—Ä–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! "
            f"–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç—ã! ü•≥"
        )

    # -------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –î–õ–Ø –í–´–•–û–î–ù–´–•/–ü–†–ê–ó–î–ù–ò–ö–û–í -------------------- #
    def get_weekend_birthdays(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –î–† –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ (–µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)."""
        today = datetime.now(tz=ZoneInfo(self.timezone))
        if today.weekday() == 0:  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            saturday = (today - timedelta(days=2)).strftime("%d.%m")
            sunday = (today - timedelta(days=1)).strftime("%d.%m")
            return {name: date for name, date in self.birthdays.items() if date in [saturday, sunday]}
        return {}

    def get_holiday_birthdays(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –î–† –∑–∞ –≤—á–µ—Ä–∞, –µ—Å–ª–∏ –≤—á–µ—Ä–∞ –±—ã–ª –ø—Ä–∞–∑–¥–Ω–∏–∫."""
        today = datetime.now(tz=ZoneInfo(self.timezone))
        yesterday = (today - timedelta(days=1)).strftime("%d.%m")
        if yesterday in HOLIDAYS:
            return {name: date for name, date in self.birthdays.items() if date == yesterday}
        return {}

    # -------------------- –û–¢–ü–†–ê–í–ö–ê –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–ô -------------------- #
    async def send_birthday_greetings(self, context: CallbackContext, target_chat_id: str = None, test: bool = False):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π.
        - target_chat_id: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–π–¥—ë—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è /check).
        - test: –µ—Å–ª–∏ True, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å "–¢–ï–°–¢" –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–¥—ë—Ç –≤ target_chat_id.
        """
        chat_id = target_chat_id or self.chat_id
        today = datetime.now(tz=ZoneInfo(self.timezone))
        today_str = today.strftime("%d.%m")

        birthdays_today = {name: date for name, date in self.birthdays.items() if date == today_str}
        weekend_birthdays = self.get_weekend_birthdays()
        holiday_birthdays = self.get_holiday_birthdays()

        all_birthdays = {
            "–°–µ–≥–æ–¥–Ω—è": birthdays_today,
            "–í –≤—ã—Ö–æ–¥–Ω—ã–µ": weekend_birthdays,
            "–í –ø—Ä–∞–∑–¥–Ω–∏–∫": holiday_birthdays
        }

        messages = []
        for label, bdays in all_birthdays.items():
            if not bdays:
                continue

            if label == "–°–µ–≥–æ–¥–Ω—è":
                if len(bdays) == 1:
                    name = next(iter(bdays))
                    greeting = await self.generate_greeting(name)
                    messages.append(greeting if greeting.startswith("üéâ") else f"üéâ {greeting}")
                else:
                    multi_greeting = await self.generate_multi_birthday_greeting(list(bdays.keys()))
                    messages.append(multi_greeting)

            elif label == "–í –≤—ã—Ö–æ–¥–Ω—ã–µ":
                # –§–æ—Ä–º–∞—Ç: "–í —Å—É–±–±–æ—Ç—É —É –ú–∞—Ä–∏–∏ –±—ã–ª –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!\n[–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ]"
                for name, date in bdays.items():
                    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–æ –¥–∞—Ç–µ (–≥–æ–¥ –Ω–µ–≤–∞–∂–µ–Ω, —Å—Ç–∞–≤–∏–º –±–ª–∏–∂–∞–π—à–∏–π –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π/–Ω–µ - –±–µ—Ä–µ–º 2025)
                    try:
                        weekday_idx = datetime.strptime(date + ".2025", "%d.%m.%Y").weekday()
                        weekday_name_en = calendar.day_name[weekday_idx]
                        weekday_ru = {"Saturday": "–≤ —Å—É–±–±–æ—Ç—É", "Sunday": "–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}.get(weekday_name_en, "–≤ –≤—ã—Ö–æ–¥–Ω—ã–µ")
                    except Exception:
                        weekday_ru = "–≤ –≤—ã—Ö–æ–¥–Ω—ã–µ"

                    greeting = await self.generate_greeting(name)
                    greeting_text = greeting if greeting.startswith("üéâ") else f"üéâ {greeting}"
                    messages.append(f"üéâ {weekday_ru.capitalize()} —É {name} –±—ã–ª –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!\n{greeting_text}")

            elif label == "–í –ø—Ä–∞–∑–¥–Ω–∏–∫":
                # –§–æ—Ä–º–∞—Ç: "–í –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å (dd.mm) —É –ú–∞—Ä–∏–∏ –±—ã–ª –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!\n[–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ]"
                for name, date in bdays.items():
                    greeting = await self.generate_greeting(name)
                    greeting_text = greeting if greeting.startswith("üéâ") else f"üéâ {greeting}"
                    messages.append(f"üéâ –í –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å ({date}) —É {name} –±—ã–ª –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!\n{greeting_text}")

        if messages:
            full_message = "\n\n".join(messages)
            if test:
                full_message = "üéØ –¢–ï–°–¢–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:\n\n" + full_message
            await context.bot.send_message(chat_id=chat_id, text=full_message)
            print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:", messages)
        else:
            print("üìÖ –°–µ–≥–æ–¥–Ω—è –∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤")

    async def force_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç –±–æ–µ–≤—É—é send_birthday_greetings).
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç, –≥–¥–µ –≤—ã–∑–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É, –∏ –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–µ—Å—Ç.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ (–ª–æ–∫–∞–ª—å–Ω–æ)
        birthdays_today = self.get_today_birthdays()
        if not birthdays_today:
            await update.message.reply_text("üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∞–∑–¥–Ω—É–µ—Ç")
            return

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–æ–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç, –≥–¥–µ –≤—ã–∑–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É
            await update.message.reply_text("üîç –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π...")
            await self.send_birthday_greetings(context, target_chat_id=update.message.chat_id, test=True)
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—à–µ).")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

    def get_today_birthdays(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞)"""
        today = datetime.now(tz=ZoneInfo(self.timezone)).strftime("%d.%m")
        return [name for name, date in self.birthdays.items() if date == today]

    async def get_chat_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞"""
        chat_id = update.message.chat_id
        await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")
        print(f"–ü–æ–ª—É—á–µ–Ω ID —á–∞—Ç–∞: {chat_id}")

    # -------------------- –ó–ê–ü–£–°–ö –ë–û–¢–ê -------------------- #
    def run(self):
        """–ó–∞–ø—É—Å–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        application = Application.builder().token(self.token).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        handlers = [
            CommandHandler("start", self.start),
            CommandHandler("add", self.add_birthday),
            CommandHandler("list", self.list_birthdays),
            CommandHandler("import", self.import_birthdays),
            CommandHandler("getid", self.get_chat_id),
            CommandHandler("check", self.force_check),
            CommandHandler("sync", self.sync_files),
            CommandHandler("help", self.start),
            CallbackQueryHandler(self.button_handler)
        ]

        for handler in handlers:
            application.add_handler(handler)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 09:00 –ø–æ TZ)
        job_queue = application.job_queue
        if job_queue:
            job_queue.run_daily(
                self.send_birthday_greetings,
                time=time(hour=9, minute=0, tzinfo=ZoneInfo(self.timezone)),
                name="daily_birthday_check"
            )
            print(f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 09:00 ({self.timezone})")

        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()


if __name__ == "__main__":
    bot = BirthdayBot()
    #bot.run()
    bot.run()

