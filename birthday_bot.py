import os
import json
import logging
import csv
import requests
from datetime import datetime, time
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
from zoneinfo import ZoneInfo

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ê -------------------- #
load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class BirthdayBot:
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        self.chat_id = os.getenv('CHAT_ID')
        self.deepseek_api_key = os.getenv('DEEPSEEK_API_KEY')
        self.timezone = os.getenv('TZ', 'Europe/Moscow')
        self.birthdays_file = 'birthdays.json'
        self.load_birthdays()

    # -------------------- –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò -------------------- #
    def load_birthdays(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.birthdays_file, 'r', encoding='utf-8') as f:
                self.birthdays = json.load(f)
        except FileNotFoundError:
            self.birthdays = {}
            self.save_birthdays()

    def save_birthdays(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≤ JSON –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å CSV"""
        with open(self.birthdays_file, 'w', encoding='utf-8') as f:
            json.dump(self.birthdays, f, ensure_ascii=False, indent=2)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å CSV
        self.sync_to_csv()

    def sync_to_csv(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
        try:
            with open('import_birthdays.csv', 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=['–ò–º—è', '–î–∞—Ç–∞'])
                writer.writeheader()
                for name, date in self.birthdays.items():
                    writer.writerow({'–ò–º—è': name, '–î–∞—Ç–∞': date})
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ CSV: {e}")

    # -------------------- –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê -------------------- #
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        commands = [
            "/add –∏–º—è –¥–µ–Ω—å.–º–µ—Å—è—Ü - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
            "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", 
            "/import - –∏–º–ø–æ—Ä—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞",
            "/getid - –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞",
            "/check - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
            "/sync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤",
            "/help - –ø–æ–º–æ—â—å"
        ]
        
        await update.message.reply_text(
            "üéÇ –ë–æ—Ç-–ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç–æ—Ä\n\n" +
            "–ö–æ–º–∞–Ω–¥—ã:\n" + "\n".join(f"‚Ä¢ {cmd}" for cmd in commands)
        )

    async def add_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not context.args or len(context.args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ò–º—è –¥–µ–Ω—å.–º–µ—Å—è—Ü\n–ü—Ä–∏–º–µ—Ä: /add –ò–≤–∞–Ω 15.05")
            return

        try:
            name = ' '.join(context.args[:-1]).strip()
            date_str = context.args[-1].strip()
            
            if not name:
                await update.message.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
            day, month = map(int, date_str.split('.'))
            if not (1 <= day <= 31 and 1 <= month <= 12):
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –§–æ—Ä–º–∞—Ç: –¥–µ–Ω—å.–º–µ—Å—è—Ü (01-31.01-12)")
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            self.birthdays[name] = f"{day:02d}.{month:02d}"
            self.save_birthdays()
            
            await update.message.reply_text(f"‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω(–∞): {day:02d}.{month:02d}")

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ò–º—è –¥–µ–Ω—å.–º–µ—Å—è—Ü")

    async def import_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–º–ø–æ—Ä—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        try:
            imported_count = 0
            
            with open('import_birthdays.csv', 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reader:
                    if all(key in row for key in ['–ò–º—è', '–î–∞—Ç–∞']):
                        name = row['–ò–º—è'].strip()
                        date_str = row['–î–∞—Ç–∞'].strip()
                        
                        if name and date_str and self._validate_date(date_str):
                            self.birthdays[name] = date_str
                            imported_count += 1

            if imported_count > 0:
                self.save_birthdays()
                await update.message.reply_text(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {imported_count}")
            else:
                await update.message.reply_text("‚ùå –§–∞–π–ª import_birthdays.csv –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç")

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")

    def _validate_date(self, date_str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã"""
        try:
            day, month = map(int, date_str.split('.'))
            return 1 <= day <= 31 and 1 <= month <= 12
        except ValueError:
            return False

    async def list_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not self.birthdays:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç")
            return
        
        response = "üìÖ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n"
        for name, date in sorted(self.birthdays.items(), key=lambda x: x[1]):
            response += f"‚Ä¢ {name}: {date}\n"
        
        await update.message.reply_text(response)

    async def sync_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤"""
        try:
            self.sync_to_csv()
            count = len(self.birthdays)
            await update.message.reply_text(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –ó–∞–ø–∏—Å–µ–π: {count}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    async def generate_greeting(self, full_name):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ DeepSeek API"""
        first_name = full_name.split()[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è
    
        try:
            if not self.deepseek_api_key:
                # Fallback –Ω–∞ —à–∞–±–ª–æ–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞
                return f"üéâ –î–æ—Ä–æ–≥–æ–π {first_name}, –æ—Ç –≤—Å–µ–π –¥—É—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ"
        
            url = "https://api.deepseek.com/v1/chat/completions"
            headers = {
                "Authorization": f"Bearer {self.deepseek_api_key}", 
                "Content-Type": "application/json"
            }
        
            data = {
                "model": "deepseek-chat",
                "messages": [
                    {
                        "role": "system", 
                        "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç —Ç–µ–ø–ª—ã–µ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ–ª–ª–µ–≥–∞–º. –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –¥—Ä—É–∂–µ—Å–∫–∏–º–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏. –ü–∏—à–∏ –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑. –£—á–∏—Ç—ã–≤–∞–π —á—Ç–æ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤.–ü–∏—à–∏ –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞ –≤ –Ω–∞—á–∞–ª–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."
                    },
                    {
                        "role": "user",
                        "content": f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–ª–µ–≥–∏ –ø–æ –∏–º–µ–Ω–∏ {first_name}. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏."
                    }
                ],
                "max_tokens": 100,
                "temperature": 0.9
            }
        
            response = requests.post(url, headers=headers, json=data, timeout=10)
            response.raise_for_status()
            result = response.json()
        
            greeting = result['choices'][0]['message']['content'].strip()
        
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ –∏–º—è –µ—Å—Ç—å –≤ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–∏
            if first_name.lower() not in greeting.lower():
                greeting = f"{first_name}, {greeting}"
            
            return greeting
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ DeepSeek: {e}")
            # Fallback –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            return f"üéâ –î–æ—Ä–æ–≥–æ–π {first_name}, –æ—Ç –≤—Å–µ–π –¥—É—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ"
   
    # -------------------- –ü–†–û–í–ï–†–ö–ê –ò –û–¢–ü–†–ê–í–ö–ê -------------------- #
    def get_today_birthdays(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now(tz=ZoneInfo(self.timezone)).strftime("%d.%m")
        return [name for name, date in self.birthdays.items() if date == today]

    async def send_birthday_greetings(self, context: CallbackContext):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π"""
        birthdays_today = self.get_today_birthdays()
        
        if not birthdays_today:
            print("üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∞–∑–¥–Ω—É–µ—Ç")
            return
        
        print(f"üéÇ –ù–∞–π–¥–µ–Ω—ã –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∏: {birthdays_today}")
        
        if len(birthdays_today) == 1:
            # –û–¥–∏–Ω –∏–º–µ–Ω–∏–Ω–Ω–∏–∫
            name = birthdays_today[0]
            greeting = await self.generate_greeting(name)
            await context.bot.send_message(chat_id=self.chat_id, text=f"üéâ {greeting}")
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {name}")
            
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤
            message = f"üéâ –°–µ–≥–æ–¥–Ω—è {len(birthdays_today)} –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞! üéä\n\n"
            for name in birthdays_today:
                greeting = await self.generate_greeting(name)
                message += f"üéÇ {greeting}\n\n"
            
            message += "üéâ –û—Ç –≤—Å–µ–≥–æ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞ –∂–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è –∏ —É–ª—ã–±–æ–∫! ü•≥"
            await context.bot.send_message(chat_id=self.chat_id, text=message)
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ")

    async def force_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
        birthdays_today = self.get_today_birthdays()
        
        if birthdays_today:
            response = f"üéâ –¢–µ—Å—Ç: —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω—É—é—Ç {len(birthdays_today)} —á–µ–ª–æ–≤–µ–∫!\n\n"
            for name in birthdays_today:
                greeting = await self.generate_greeting(name)
                response += f"{greeting}\n\n"
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∞–∑–¥–Ω—É–µ—Ç")
    async def get_chat_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞"""
        chat_id = update.message.chat_id
        await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")
        print(f"–ü–æ–ª—É—á–µ–Ω ID —á–∞—Ç–∞: {chat_id}")

    # -------------------- –ó–ê–ü–£–°–ö –ë–û–¢–ê -------------------- #
    def run(self):
        """–ó–∞–ø—É—Å–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        application = Application.builder().token(self.token).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        handlers = [
            CommandHandler("start", self.start),
            CommandHandler("add", self.add_birthday),
            CommandHandler("list", self.list_birthdays),
            CommandHandler("import", self.import_birthdays),
            CommandHandler("getid", self.get_chat_id),
            CommandHandler("check", self.force_check),
            CommandHandler("sync", self.sync_files),
            CommandHandler("help", self.start)
        ]
        
        for handler in handlers:
            application.add_handler(handler)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        job_queue = application.job_queue
        if job_queue:
            job_queue.run_daily(
                self.send_birthday_greetings,
                time=time(hour=23, minute=40, tzinfo=ZoneInfo(self.timezone)),
                name="daily_birthday_check"
            )
            print(f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 09:00 ({self.timezone})")

        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

if __name__ == "__main__":
    bot = BirthdayBot()
    bot.run()